____________________________________________________
setup code
_________________________________________________________
#include<SoftwareSerial.h>//  communication on other digital pins of an Arduino board
SoftwareSerial m(10,11);//10th is Rx and 11th Tx
void setup() 
{
  Serial.begin(115200);//set the boudrate 
  m.begin(115200);
}
void loop() {
  if(m.available()) {
    Serial.write(m.read());//communicate serial monitor
  }
  if(Serial.available())
  {
    m.write(Serial.read());// for comunicate ESP8266 
  }    
}
_____________________________________________________________
THINGSPEAK code
___________________________________________________________

#include <SoftwareSerial.h>//for communicating digital pin

int val;  float temp;  int temppin=A1;//declear variable
String apiKey="VF4UGFJQ694ZEBS8";  //user API key

SoftwareSerial ser(10, 11);  //Rx, Tx

void setup() { 
    Serial.begin(115200); //set the boudrate
    ser.begin(115200);   }
void loop() {
  //send command to the ESP to set up the TCP connection  
  String cmd = "AT+CIPSTART=\"TCP\",\""; //
  cmd += "184.106.153.149";  //api.thingspeak.com
  cmd += "\",80";

  ser.println(cmd);
   
  if(ser.find("Error")) {
    Serial.println("AT+CIPSTART error");
    return;    }
  val=analogRead(A0);  //Read the temperature sensor data
  temp=(val*500/1024);  //store the data in the Celsius form

  //Now prepare the GET string
  String getStr = "GET /update?api_key=";
  getStr += apiKey;
  getStr +="&field1=";
  getStr += String(temp);
  getStr += "\r\n\r\n";
  //send the data length to the ESP module
  cmd = "AT+CIPSEND=";
  cmd += String(getStr.length());
  ser.println(cmd);

 if(ser.find(">")) 
  {
    ser.print(getStr);  //send the actual data which is available in getStr    
  }
  else {
    ser.println("AT+CIPCLOSE");  //close the TCP connection
    Serial.println("AT+CIPCLOSE");  //alert the user
    }

  //Thingspeak needs a 15 sec of delay between the updates.
  //So After successful update led on Arduino board should blink twice.

 }    // loop() closed

______________________________________________________________________
RPI program.
_____________________________________________________________________
import urllib.request
import json
import vonage 
import time as t
import RPi.GPIO as a

a.setwarnings(False)
a.setmode(a.BOARD)
a.setup(24, a.OUT)
a.setup(26, a.OUT)
a.output(26, a.LOW)

print("waiting for data upload....")
t.sleep(15)
print("data is uploaded successfully..")
t.sleep(10)

c = urllib.request.Request("https://api.thingspeak.com/channels/2623787/fields/2/last.json?api_key=U5UIRVFDOI4779S3")
r = urllib.request.urlopen(c)
r1 = r.read()
dat = json.loads(r1)
data = int(float(dat['field2']))
print("Retrieved data is: ", data)

if data >= 30:
    print("data is more than the threshold value...")
    t.sleep(2)
    print("sending the text msg to phone...")
    client = vonage.Client(key="723d2d91", secret="aLRoKdZ7YbO8NmIf")
    sms = vonage.Sms(client)
    responseData = sms.send_message(
        {
            "from": "Vonage APIs",
            "to": "916203313124",
            "text": "A text message sent using the Nexmo SMS API",
        }
    )

    if responseData["messages"][0]["status"] == "0":
        print("Message sent successfully.")
    else:
        print(f"Message failed with error: {responseData['messages'][0]['error-text']}")

    t.sleep(5)
    print("Turning on the fan..")
    t.sleep(1)
    a.output(24, a.HIGH)
    t.sleep(10)
    a.output(24, a.LOW)
    t.sleep(2)
else:
    print("Temperature is normal...")
    print("Thank You")